{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","robot","index","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","error","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","console","log","onRequestRobots","filteredRobots","filter","toLowerCase","includes","searchField","isPending","Fragment","onSearchChange","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","usersJson","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","combineReducers","action","Object","assign","logger","createLogger","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SAceA,MAZf,YAAkC,IAAnBC,EAAkB,EAAlBA,GAAIC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MACrB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,6BACI,4BAAKJ,GACL,2BAAIC,MCkBLI,MAvBf,YAA6B,IAAVC,EAAS,EAATA,OACf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAOC,GAEf,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,aCCtBU,MAbf,YAAoC,IAAhBC,EAAe,EAAfA,aAChB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,MARf,SAAgBC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCkBJC,E,YApBX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,UAAU,GAHJ,E,sEAYV,OAAIC,KAAKF,MAAMC,SACJ,qCAEAC,KAAKT,MAAMK,Y,gDARMK,GAC5B,MAAO,CAAEF,UAAU,O,GATAG,aCFdC,G,MAAsB,uBAEtBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wB,ICsB/BC,E,YACF,aAAe,IAAD,6BACV,8CACAC,QAAQC,IAAI,eAFF,E,iFAOVT,KAAKT,MAAMmB,kBACXF,QAAQC,IAAI,yB,+BAGN,IAAD,OACLD,QAAQC,IAAI,UACZ,IAAME,EAAiBX,KAAKT,MAAMX,OAAOgC,QAAO,SAAA9B,GAC5C,OAAOA,EAAMR,KAAKuC,cAAcC,SAAS,EAAKvB,MAAMwB,YAAYF,kBAIpE,OAAIb,KAAKT,MAAMyB,UACJ,uCAGH,kBAAC,IAAMC,SAAP,KACI,wBAAIzC,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcc,KAAKT,MAAM2B,iBACpC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUtC,OAAQ+B,W,GA5B5BT,aAqCHiB,eApDf,SAAyBrB,GACrB,MAAO,CACHiB,YAAajB,EAAMsB,aAAaL,YAChCnC,OAAQkB,EAAMuB,cAAczC,OAC5BoC,UAAWlB,EAAMuB,cAAcL,UAC/Bf,MAAOH,EAAMuB,cAAcpB,UAGnC,SAA4BqB,GACxB,MAAO,CACHJ,eAAgB,SAACK,GAAD,OAAWD,GCdJE,EDc4BD,EAAME,OAAOC,MCb7D,CAAEvC,KAAMgB,EAAqBwB,QAASH,KAD1C,IAAwBA,GDevBd,gBAAiB,kBAAMY,GCVpB,SAACA,GACJA,EAAS,CAACnC,KAAMiB,IAChBwB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAS,OAAIV,EAAS,CAACnC,KAAMkB,EAAwBsB,QAASK,OACnEC,OAAM,SAAAhC,GAAK,OAAIqB,EAAS,CAACnC,KAAMmB,EAAuBqB,QAAS1B,cD8C7DkB,CAA6CZ,GEnDxC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCfAC,EAAqB,CACvBxB,YAAa,IAYjB,IAAMyB,EAAqB,CACvBxB,WAAW,EACXpC,OAAQ,GACRqB,MAAO,IAgBIwC,kBAAgB,CAACrB,aA5BhC,WAA2D,IAArCtB,EAAoC,uDAA5ByC,EAAoBG,EAAQ,uCACtD,OAAQA,EAAOvD,MACX,KAAKgB,EACD,OAAOwC,OAAOC,OAAO,GAAK9C,EAAO,CAACiB,YAAa2B,EAAOf,UAC1D,QACI,OAAO7B,IAuB2BuB,cAb9C,WAA4D,IAArCvB,EAAoC,uDAA5B0C,EAAoBE,EAAQ,uCACvD,OAAQA,EAAOvD,MACX,KAAKiB,EACD,OAAOuC,OAAOC,OAAO,GAAK9C,EAAO,CAAEkB,WAAW,IAClD,KAAKX,EACD,OAAOsC,OAAOC,OAAO,GAAK9C,EAAO,CAAElB,OAAQ8D,EAAOf,QAASX,WAAW,IAC1E,KAAKV,EACD,OAAOqC,OAAOC,OAAO,GAAK9C,EAAO,CAAEG,MAAOyC,EAAOf,QAASX,WAAW,IACzE,QACI,OAAOlB,MCnBb+C,EAASC,yBACTC,EAAQC,YAAYC,EAAaC,YAAgBC,IAAiBN,IAExEO,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,OAENO,SAASC,eAAe,SF8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.0095f6a1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card({id, name, email}) {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({robots}) {\r\n    return (\r\n        <div>\r\n        {\r\n            robots.map((robot, index) => \r\n            {\r\n                return (\r\n                    <Card \r\n                        key={index} \r\n                        id={robot.id} \r\n                        name={robot.name} \r\n                        email={robot.email} \r\n                    />);\r\n            })\r\n        }\r\n\r\n        {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\r\n        <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\r\n        <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} /> */}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction SearchBox({searchChange}) {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                className=\"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"search\" \r\n                placeholder=\"search robots\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nfunction Scroll(props) {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n    \r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Uh oh</h1>\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n// import {robots} from './robots';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        console.log('constructor');\r\n    }\r\n\r\n    componentDidMount() \r\n    {\r\n        this.props.onRequestRobots();\r\n        console.log('component did mount');\r\n    }\r\n\r\n    render() {\r\n        console.log('render');\r\n        const filteredRobots = this.props.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase())\r\n        })\r\n\r\n\r\n        if (this.props.isPending) {\r\n            return <h1>Loading</h1>;\r\n        } else {\r\n            return (\r\n                <React.Fragment>\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.props.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport function setSearchField(text) {\r\n    return { type: CHANGE_SEARCH_FIELD, payload: text }\r\n}\r\n\r\nexport function requestRobots() {\r\n    return (dispatch) => {\r\n        dispatch({type: REQUEST_ROBOTS_PENDING});\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json())\r\n            .then(usersJson => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: usersJson}))\r\n            .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants.js';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nfunction searchRobots(state = initialStateSearch, action) {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},  state, {searchField: action.payload});\r\n        default:\r\n            return state; // return previous state on unknown action\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nfunction requestRobots(state = initialStateRobots, action) {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},  state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},  state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},  state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state; // return previous state on unknown action\r\n    }\r\n}\r\n\r\nexport default combineReducers({searchRobots, requestRobots});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport rootReducer from './reducers'\n\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}